'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, 
  PieChart, Pie, Cell, ResponsiveContainer, Legend 
} from 'recharts';
import { formatCurrency, formatNumber } from '../../utils/formatters';
import { calculateScore, getCompetitorStrength, getCompetitionLevel, MetricScoring } from '../../utils/scoring';
import MarketVisuals from './MarketVisuals';
import { KeepaAnalysis } from '../Keepa/KeepaAnalysis';
import { KeepaAnalysisResult } from '../Keepa/KeepaTypes';
import {
  selectKeepaResults,
  selectKeepaStatus,
  selectKeepaError,
  selectTokenBalance,
  setKeepaData,
  startAnalysis,
  setError
} from '../../store/keepaSlice';
import type { AppDispatch } from '../../store';
import { TrendingUp, Users, Loader2, CheckCircle2, BarChart3, Calendar, Package, BarChart2, Info, X } from 'lucide-react';

interface Competitor {
  asin: string;
  title: string;
  monthlyRevenue: number;
  monthlySales: number;
  reviews?: number | string;
  rating?: number | string;
  score?: number | string;
  fulfillment?: 'FBA' | 'FBM' | 'Amazon';
  fulfillmentMethod?: string;
  fulfilledBy?: string;
  listingQuality?: {
    infographics: 'high' | 'medium' | 'low';
  };
  marketShare: number;
  dateFirstAvailable?: string;
  brand?: string;
  price?: number;
  category?: string;
  sellerCountry?: string;
  productType?: string;
}

interface ProductVettingResultsProps {
  competitors: Competitor[];
  distributions?: {
    age: {
      mature: number;
      established: number;
      growing: number;
      new: number;
      na?: number;
    };
    fulfillment: {
      fba: number;
      fbm: number;
      amazon: number;
      na?: number;
    };
    listingQuality: {
      exceptional: number;
      decent: number;
      poor: number;
      na?: number;
    };
  };
  // New props for auto-initialized Keepa analysis
  keepaResults?: KeepaAnalysisResult[];
  marketScore?: number;
  analysisComplete?: boolean;
}

const calculateDistributions = (competitors) => {
  const total = competitors.length || 1;
  
  // Initialize with default values
  const ageRanges = {
    new: 0,
    growing: 0,
    established: 0,
    mature: 0
  };

  // Fulfillment Methods
  const fulfillmentRanges = {
    fba: 0,
    fbm: 0,
    amazon: 0
  };

  // Listing Quality
  const listingQualityRanges = {
    exceptional: 0,
    decent: 0,
    poor: 0
  };
  
  // Now calculate actual counts if we have competitors
  if (competitors && competitors.length > 0) {
    // Market Age Distribution
    competitors.forEach(c => {
      if (!c.age && c.dateFirstAvailable) {
        c.age = calculateAge(c.dateFirstAvailable);
      }
      
      if (c.age <= 6) ageRanges.new++;
      else if (c.age > 6 && c.age <= 12) ageRanges.growing++;
      else if (c.age > 12 && c.age <= 18) ageRanges.established++;
      else if (c.age > 18) ageRanges.mature++;
    });

    // Fulfillment Methods
    competitors.forEach(c => {
      const method = (c.fulfillment || '').toLowerCase();
      if (method.includes('fba')) fulfillmentRanges.fba++;
      else if (method.includes('fbm')) fulfillmentRanges.fbm++;
      else if (method.includes('amazon')) fulfillmentRanges.amazon++;
    });

    // Listing Quality
    competitors.forEach(c => {
      const quality = c.listingQuality?.infographics;
      if (quality === 'high') listingQualityRanges.exceptional++;
      else if (quality === 'medium') listingQualityRanges.decent++;
      else if (quality === 'low') listingQualityRanges.poor++;
    });
  }

  // Convert to percentages
  const calculatePercentages = (ranges, total = 1) => {
    return Object.entries(ranges).reduce((acc, [key, value]) => {
      return {
        ...acc,
        [key]: (Number(value) / total) * 100
      };
    }, {});
  };

  return {
    age: calculatePercentages(ageRanges, total),
    fulfillment: calculatePercentages(fulfillmentRanges, total),
    listingQuality: calculatePercentages(listingQualityRanges, total)
  };
};

// Updated color constants with consistent definitions for all categories
const COLORS = {
  // Age distribution colors
  mature: '#10B981',     // Emerald
  established: '#3B82F6', // Blue
  growing: '#F59E0B',    // Amber
  new: '#EF4444',        // Red
  
  // Fulfillment colors
  fba: '#EF4444',        // Red
  fbm: '#10B981',        // Green
  amazon: '#F59E0B',     // Orange/Amber
  
  // Listing quality colors
  exceptional: '#EF4444', // Red
  decent: '#F59E0B',      // Amber
  poor: '#10B981',         // Green
  na: '#8B5CF6',           // Purple
  
  // Generic colors
  success: '#10B981',      // Emerald
  primary: '#3B82F6',      // Blue
  warning: '#F59E0B',      // Amber
  danger: '#EF4444',        // Red
  purple: '#8B5CF6'         // Purple
};

const calculateMarketMaturityScore = (competitors) => {
  if (!competitors?.length) return 0;
  const distributions = calculateDistributions(competitors);
  
  // Weight the score based on the distribution of ages
  return Math.round(
    ((distributions?.age?.mature ?? 0) * 1.0 +
     (distributions?.age?.established ?? 0) * 0.7 +
     (distributions?.age?.growing ?? 0) * 0.4 + 
     (distributions?.age?.new ?? 0) * 0.1)
  );
};

const getMarketAgeData = (competitors) => {
  return competitors.map(competitor => ({
    title: competitor.title.substring(0, 20) + '...',
    age: Math.round(Math.random() * 24) // Replace with actual age calculation
  }));
};

// Add helper function for age calculation
const getAge = (dateStr?: string): number => {
  if (!dateStr || dateStr === 'Unknown') return 0;
  const date = new Date(dateStr);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30));
};

// Add this helper function at the component level
const calculateAge = (dateStr: string): number => {
  if (!dateStr) return 0;
  const date = new Date(dateStr);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30)); // Age in months
};

// Add these helper functions at the component level
const getDominantCategory = (distribution: Record<string, number>): string => {
  const sorted = Object.entries(distribution)
    .sort(([,a], [,b]) => b - a);
  return sorted[0]?.[0] || 'N/A';
};

// Helper function to safely parse numeric values
const safeParseNumber = (value: string | number | undefined): number => {
  if (typeof value === 'undefined') return 0;
  if (typeof value === 'number') return value;
  return parseFloat(value) || 0;
};

// Helper to safely access distribution properties
const safeGet = (obj: any, key: string, defaultValue: number = 0): number => {
  return typeof obj === 'object' && obj !== null && key in obj ? 
    obj[key] : defaultValue;
};

const calculateMaturity = (distribution: Record<string, number> = {}): number => {
  const mature = safeGet(distribution, 'mature', 0);
  const established = safeGet(distribution, 'established', 0);
  const growing = safeGet(distribution, 'growing', 0);
  const newPct = safeGet(distribution, 'new', 0);
  
  return Math.round(
    (mature * 1.0 +
     established * 0.7 +
     growing * 0.4 +
     newPct * 0.1)
  );
};

// Add this custom tooltip component
const CustomTooltip = ({ active, payload, label }: any) => {
  if (active && payload?.length) {
    return (
      <div className="bg-slate-800 border border-slate-700 rounded-lg p-3 shadow-xl">
        <p className="text-slate-300 font-medium">{payload[0].name}</p>
        <p className="text-emerald-400 font-semibold">
          {payload[0].value.toFixed(1)}%
        </p>
      </div>
    );
  }
  return null;
};

// Add these helper functions at the component level
const getPrimaryAge = (age = {}) => {
  if (!age) return 'Unknown';
  const sorted = Object.entries(age || {})
    .filter(([key]) => key !== 'na') // Exclude N/A from primary calculation
    .sort((a, b) => Number(b[1] || 0) - Number(a[1] || 0));
  return sorted[0] ? sorted[0][0].charAt(0).toUpperCase() + sorted[0][0].slice(1).toLowerCase() : 'Unknown';
};

const getMaturityLevel = (age: Record<string, number> = {}) => {
  if (!age) return '0.0';
  return ((age.mature || 0) + (age.established || 0)).toFixed(1);
};

const getPrimaryMethod = (fulfillment: Record<string, number> = {}) => {
  if (!fulfillment) return 'Unknown';
  const sorted = Object.entries(fulfillment || {})
    .filter(([key]) => key !== 'na')
    .sort((a, b) => Number(b[1] || 0) - Number(a[1] || 0));
  return sorted[0] ? sorted[0][0].toUpperCase() : 'Unknown';
};

const getQualityLevel = (quality = {}) => {
  if (!quality) return 'Unknown';
  const sorted = Object.entries(quality || {})
    .filter(([key]) => key !== 'na')
    .sort((a, b) => Number(b[1] || 0) - Number(a[1] || 0));
  return sorted[0] ? sorted[0][0].charAt(0).toUpperCase() + sorted[0][0].slice(1).toLowerCase() : 'Unknown';
};

// Custom label renderer
const renderCustomLabel = ({
  cx,
  cy,
  midAngle,
  outerRadius,
  value,
  name
}: any) => {
  const radius = outerRadius * 1.2;
  const x = cx + radius * Math.cos(-midAngle * (Math.PI / 180));
  const y = cy + radius * Math.sin(-midAngle * (Math.PI / 180));
  
  return (
    <text
      x={x}
      y={y}
      fill="#94a3b8"
      textAnchor={x > cx ? 'start' : 'end'}
      dominantBaseline="central"
      className="text-xs"
    >
      {`${name} (${value.toFixed(1)}%)`}
    </text>
  );
};

export const ProductVettingResults: React.FC<ProductVettingResultsProps> = ({ 
  competitors = [],
  distributions: propDistributions,
  keepaResults = [],
  marketScore = 0,
  analysisComplete = false
}) => {
  const dispatch = useDispatch();
  
  const [activeTab, setActiveTab] = useState('overview');
  const [showComparison, setShowComparison] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const [activeIndex, setActiveIndex] = useState<number | null>(null);
  const [activeSegment, setActiveSegment] = useState<string | null>(null);
  
  // Define market entry UI status based on provided market score
  const marketEntryUIStatus = marketScore >= 70 ? 'PASS' : 
                              marketScore >= 40 ? 'RISKY' : 
                              'FAIL';
  
  // Update distributions state to use props
  const [distributions, setDistributions] = useState(propDistributions || {
    age: { mature: 0, established: 0, growing: 0, new: 0, na: 0 },
    fulfillment: { fba: 0, fbm: 0, amazon: 0, na: 0 },
    listingQuality: { exceptional: 0, decent: 0, poor: 0, na: 0 }
  });

  // Set isClient to true after component mounts
  React.useEffect(() => {
    setIsClient(true);
    
    // Update the distributions when props change
    if (propDistributions) {
      setDistributions(propDistributions);
    }
  }, [propDistributions]);

  // Helper function to extract ASIN from a URL or ASIN string
  const extractAsin = (hyperlink: string): string => {
    const match = hyperlink.match(/dp\/([A-Z0-9]{10})/);
    return match ? match[1] : hyperlink;
  };

  // Calculate total reviews for the review share column
  const totalReviews = competitors.reduce((sum, comp) => {
    const reviewValue = typeof comp.reviews === 'string' ? 
      parseFloat(comp.reviews) : (comp.reviews || 0);
    return sum + reviewValue;
  }, 0);

  // Loading state placeholder
  const renderLoadingState = () => {
    return (
      <div className="p-8">
        <div className="flex animate-pulse">
          <div className="w-2/5 h-64 bg-slate-800/30 rounded-xl"></div>
          <div className="w-3/5 h-64 ml-6 bg-slate-800/30 rounded-xl"></div>
        </div>
      </div>
    );
  };

  // Server-side or initial render placeholder
  if (typeof window === 'undefined' || !isClient) {
    return renderLoadingState();
  }

  // Add the CompetitorScoreDetails component definition
  const CompetitorScoreDetails = ({ score, competitor }) => {
    const [showDetails, setShowDetails] = useState(false);
    
    // Define the same weighting factors from scoring.ts
    const weights = {
      // HIGHEST IMPACT
      monthlySales: 2.0,
      reviews: 1.8,
      
      // MEDIUM IMPACT
      marketShare: 1.5,
      monthlyRevenue: 1.5,
      bsr: 1.3,
      rating: 1.3,
      reviewShare: 1.3,
      
      // LOWEST IMPACT
      price: 1.0,
      fulfillment: 0.8,
      listingScore: 0.8
    };
    
    // ... rest of the component content remains unchanged
  };

  // Moved renderCharts inside component to access state variables
  const renderCharts = () => {
    // Process competitor data for the breakdown table
    const competitorBreakdown = (() => {
      if (activeTab === 'fulfillment') {
        return competitors.map(comp => ({
          name: comp.title?.length > 30 ? comp.title.substring(0, 30) + '...' : comp.title || 'Unknown Product',
          asin: comp.asin,
          value: comp.fulfillmentMethod || comp.fulfillment || comp.fulfilledBy || extractFulfillmentMethod(comp) || 'N/A'
        }));
      } else if (activeTab === 'age') {
        return competitors.map(comp => ({
          name: comp.title?.length > 30 ? comp.title.substring(0, 30) + '...' : comp.title || 'Unknown Product',
          asin: comp.asin,
          value: comp.dateFirstAvailable ? calculateAge(comp.dateFirstAvailable) : 'N/A',
          category: comp.dateFirstAvailable ? 
            (calculateAge(comp.dateFirstAvailable) >= 24 ? 'Mature' : 
              calculateAge(comp.dateFirstAvailable) >= 12 ? 'Established' :
              calculateAge(comp.dateFirstAvailable) >= 6 ? 'Growing' : 'New') : 'N/A'
        }));
      } else {
        return competitors.map(comp => ({
          name: comp.title?.length > 30 ? comp.title.substring(0, 30) + '...' : comp.title || 'Unknown Product',
          asin: comp.asin,
          value: comp.score ? parseFloat(comp.score.toString()).toFixed(1) : 'N/A',
          category: comp.score ? 
            (parseFloat(comp.score.toString()) >= 7.5 ? 'Exceptional' : 
              parseFloat(comp.score.toString()) >= 5 ? 'Decent' : 'Poor') : 'N/A'
        }));
      }
    })();

    // Helper for category descriptions
    const getCategoryDescription = (category) => {
      if (activeTab === 'age') {
        return {
          'Mature': 'Products in market for 2+ years',
          'Established': 'Products in market for 1-2 years',
          'Growing': 'Products in market for 6-12 months',
          'New': 'Products in market for 0-6 months'
        }[category] || '';
      } else if (activeTab === 'fulfillment') {
        return {
          'FBA': 'Fulfilled by Amazon - Prime eligible',
          'FBM': 'Fulfilled by Merchant - Seller handles shipping',
          'Amazon': 'Sold & shipped by Amazon directly'
        }[category] || '';
      } else {
        return {
          'Exceptional': 'High quality listings (7.5-10)',
          'Decent': 'Average quality listings (5-7.4)',
          'Poor': 'Below average listings (0-4.9)'
        }[category] || '';
      }
    };

    const getSummaryText = () => {
      if (activeTab === 'age') {
        const maturityLevel = getMaturityLevel(distributions.age);
        return parseFloat(maturityLevel) > 60 
          ? `${maturityLevel}% maturity indicates an established market with stable demand and potentially high barriers to entry.`
          : `${maturityLevel}% maturity suggests a growing market with opportunities for new entrants.`;
      } else if (activeTab === 'fulfillment') {
        return `${(distributions.fulfillment.fba || 0).toFixed(1)}% FBA indicates ${distributions.fulfillment.fba > 70 ? 'high' : 'moderate'} 
          competition for Prime customers.`;
      } else {
        const poorPercentage = (distributions.listingQuality.poor || 0).toFixed(1);
        return `${poorPercentage}% Poor quality listings represent ${parseFloat(poorPercentage) > 40 ? 'a significant' : 'an'} 
          opportunity to differentiate with better content.`;
      }
    };

    const getPieChartData = () => {
      if (activeTab === 'age') {
        return [
          { name: 'Mature (2+ years)', shortName: 'Mature', value: distributions.age.mature || 0, fill: COLORS.mature },
          { name: 'Established (1-2 years)', shortName: 'Established', value: distributions.age.established || 0, fill: COLORS.established },
          { name: 'Growing (6-12 months)', shortName: 'Growing', value: distributions.age.growing || 0, fill: COLORS.growing },
          { name: 'New (0-6 months)', shortName: 'New', value: distributions.age.new || 0, fill: COLORS.new },
          { name: 'N/A', shortName: 'N/A', value: distributions.age.na || 0, fill: "#4B5563" }
        ].filter(item => item.value > 0);
      } else if (activeTab === 'fulfillment') {
        return [
          { name: 'FBA', shortName: 'FBA', value: distributions.fulfillment.fba || 0, fill: COLORS.fba },
          { name: 'FBM', shortName: 'FBM', value: distributions.fulfillment.fbm || 0, fill: COLORS.fbm },
          { name: 'Amazon', shortName: 'Amazon', value: distributions.fulfillment.amazon || 0, fill: COLORS.amazon },
          { name: 'N/A', shortName: 'N/A', value: distributions.fulfillment.na || 0, fill: "#4B5563" }
        ].filter(item => item.value > 0);
      } else {
        return [
          { name: 'Exceptional (7.5-10)', shortName: 'Exceptional', value: distributions.listingQuality.exceptional || 0, fill: COLORS.exceptional },
          { name: 'Decent (5-7.4)', shortName: 'Decent', value: distributions.listingQuality.decent || 0, fill: COLORS.decent },
          { name: 'Poor (0-4.9)', shortName: 'Poor', value: distributions.listingQuality.poor || 0, fill: COLORS.poor },
          { name: 'N/A', shortName: 'N/A', value: distributions.listingQuality.na || 0, fill: COLORS.na }
        ].filter(item => item.value > 0);
      }
    };

    const pieChartData = getPieChartData();

    return (
      <div className="p-8">
        {/* Tab Navigation */}
        <div className="flex mb-6 border-b border-slate-700/50 overflow-x-auto">
          <button
            className={`px-6 py-3 flex items-center gap-2 text-sm font-medium rounded-t-lg transition-all ${
              activeTab === 'overview' 
                ? 'bg-slate-700/30 text-emerald-400 border-b-2 border-emerald-400' 
                : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700/20'
            }`}
            onClick={() => setActiveTab('overview')}
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M4 6h16M4 10h16M4 14h16M4 18h16" />
            </svg>
            Competitor Overview
          </button>
          
          {/* ... other tab buttons ... */}
          
          <button
            className={`px-6 py-3 flex items-center gap-2 text-sm font-medium rounded-t-lg transition-all ${
              activeTab === 'uploadedData' 
                ? 'bg-slate-700/30 text-emerald-400 border-b-2 border-emerald-400' 
                : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700/20'
            }`}
            onClick={() => setActiveTab('uploadedData')}
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Uploaded Data
          </button>
        </div>
        
        {/* Rest of the chart render code... */}
      </div>
    );
  };

  // Helper functions for color selection
  const getCompetitorCountColor = (count: number): string => {
    if (count < 20) return 'text-emerald-400 border-emerald-500/50';
    if (count < 50) return 'text-blue-400 border-blue-500/50';
    if (count < 100) return 'text-amber-400 border-amber-500/50';
    return 'text-red-400 border-red-500/50';
  };
  
  const getRevenueColor = (revenue: number): string => {
    if (revenue > 5000) return 'text-emerald-400 border-emerald-500/50';
    if (revenue > 2500) return 'text-blue-400 border-blue-500/50';
    if (revenue > 1000) return 'text-amber-400 border-amber-500/50';
    return 'text-red-400 border-red-500/50';
  };

  // Safe calculation wrapper
  const safeCalculate = (calculation: () => number, defaultValue: number = 0): number => {
    try {
      return calculation();
    } catch (error) {
      console.error('Calculation error:', error);
      return defaultValue;
    }
  };

  // Safe header metrics calculation
  const headerMetrics = {
    marketCap: {
      value: safeCalculate(() => competitors.reduce((sum, comp) => sum + (comp?.monthlyRevenue || 0), 0)),
      display: safeCalculate(() => {
        const value = competitors.reduce((sum, comp) => sum + (comp?.monthlyRevenue || 0), 0);
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          maximumFractionDigits: 2
        }).format(value);
      }, '$0.00')
    },
    revenuePerCompetitor: {
      value: safeCalculate(() => {
        if (!competitors.length) return 0;
        return competitors.reduce((sum, comp) => sum + (comp?.monthlyRevenue || 0), 0) / competitors.length;
      }),
      display: safeCalculate(() => {
        if (!competitors.length) return '$0.00';
        const value = competitors.reduce((sum, comp) => sum + (comp?.monthlyRevenue || 0), 0) / competitors.length;
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          maximumFractionDigits: 2
        }).format(value);
      }, '$0.00')
    },
    totalCompetitors: {
      value: competitors.length,
      display: competitors.length.toString()
    }
  };

  // Get top 5 competitors by monthly revenue
  const top5Competitors = competitors
    .sort((a, b) => b.monthlyRevenue - a.monthlyRevenue)
    .slice(0, 5);
    
  // Extract clean ASINs from hyperlinks
  const asinsToAnalyze = top5Competitors
    .map(comp => extractAsin(comp.asin))
    .filter(asin => asin.length === 10);

  // Calculate market entry status
  const getMarketEntryStatus = (score: number): string => {
    if (score >= 70) return 'FAVORABLE';
    if (score >= 40) return 'NEUTRAL';
    return 'CHALLENGING';
  };

  const getMarketEntryUIStatus = (status: string): 'PASS' | 'FAIL' | 'RISKY' => {
    switch (status) {
      case 'FAVORABLE': return 'PASS';
      case 'CHALLENGING': return 'FAIL';
      case 'NEUTRAL': return 'RISKY';
      default: return 'RISKY';
    }
  };

  const getMarketEntryMessage = (score: number): string => {
    if (score >= 70) {
      return 'Market conditions are favorable for entry. Strong revenue potential with manageable competition.';
    } else if (score >= 40) {
      return 'Consider market conditions carefully. Moderate opportunity with some challenges.';
    } else {
      return 'Market conditions present significant challenges. High competition or low revenue potential.';
    }
  };

  const getStatusStyles = (status: 'PASS' | 'FAIL' | 'RISKY') => ({
    PASS: 'bg-emerald-900/20 text-emerald-400 border-emerald-500/20',
    FAIL: 'bg-red-900/20 text-red-400 border-red-500/20',
    RISKY: 'bg-amber-900/20 text-amber-400 border-amber-500/20'
  }[status]);

  const getAssessmentSummary = (status: string): string => {
    switch (status) {
      case 'PASS':
        return 'Great Opportunity';
      case 'RISKY':
        return 'Proceed with Caution';
      case 'FAIL':
        return 'Not Recommended';
      default:
        return 'Assessment Unavailable';
    }
  };

  const getBorderColorClass = (status: 'PASS' | 'FAIL' | 'RISKY') => ({
    PASS: 'border-emerald-500/50',
    RISKY: 'border-amber-500/50',
    FAIL: 'border-red-500/50'
  }[status]);

  const getGlowColorClass = (status: 'PASS' | 'FAIL' | 'RISKY') => ({
    PASS: 'shadow-emerald-500/20',
    RISKY: 'shadow-amber-500/20',
    FAIL: 'shadow-red-500/20'
  }[status]);

  const getTextColorClass = (status: 'PASS' | 'FAIL' | 'RISKY') => ({
    PASS: 'text-emerald-400',
    RISKY: 'text-amber-400',
    FAIL: 'text-red-400'
  }[status]);

  // Render header metrics section
  const renderHeaderMetrics = () => {
    const competitorColorClass = getCompetitorCountColor(competitors.length);
    const competitionLevel = getCompetitionLevel(competitors);
    
    // Calculate total market cap
    const totalMarketCap = competitors.reduce((sum, comp) => sum + (comp?.monthlyRevenue || 0), 0);
    
    // Calculate revenue per competitor
    const revenuePerCompetitor = competitors.length ? 
      totalMarketCap / competitors.length : 0;
    
    return (
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Market Cap Card */}
        <div className={`bg-slate-800/50 rounded-2xl border-2 border-emerald-500/50 p-6`}>
          <div className="flex items-start justify-between mb-4">
            <h2 className="text-lg font-semibold text-white">Market Cap</h2>
            <BarChart3 className="w-8 h-8 text-slate-400" strokeWidth={1.5} />
          </div>
          <div className="text-3xl font-bold text-emerald-400">
            {formatCurrency(totalMarketCap)}
          </div>
        </div>

        {/* Revenue per Competitor Card */}
        <div className={`bg-slate-800/50 rounded-2xl border-2 ${getRevenueColor(revenuePerCompetitor)} p-6`}>
          <div className="flex items-start justify-between mb-4">
            <h2 className="text-lg font-semibold text-white">Revenue per Competitor</h2>
            <TrendingUp className="w-8 h-8 text-slate-400" strokeWidth={1.5} />
          </div>
          <div className={`text-3xl font-bold ${getRevenueColor(revenuePerCompetitor)}`}>
            {formatCurrency(revenuePerCompetitor)}
          </div>
        </div>

        {/* Total Competitors Card - Now includes competition level */}
        <div className={`bg-slate-800/50 rounded-2xl border-2 ${competitorColorClass} p-6`}>
          <div className="flex items-start justify-between mb-4">
            <h2 className="text-lg font-semibold text-white">Total Competitors</h2>
            <Users className="w-8 h-8 text-slate-400" strokeWidth={1.5} />
          </div>
          <div className="flex items-center gap-2">
            <span className={`text-3xl font-bold ${competitorColorClass}`}>
              {competitors.length}
            </span>
            <span className={`text-sm font-semibold rounded-md px-2 py-1 ${
              competitionLevel.level === 'SATURATED' || competitionLevel.level === 'HIGH'
                ? 'bg-red-900/30 text-red-400'
                : competitionLevel.level === 'MODERATE'
                ? 'bg-amber-900/30 text-amber-400'
                : 'bg-emerald-900/30 text-emerald-400'
            }`}>
              {competitionLevel.level}
            </span>
          </div>
        </div>
      </div>
    );
  };

  // Render market entry assessment section
  const renderMarketEntryAssessment = () => {
    // Get competition level to include in the market assessment
    const competitionLevel = getCompetitionLevel(competitors);
    
    // Generate appropriate market entry message based on score
    const marketEntryMessage = marketScore >= 70 ? 
      'Market conditions are favorable for entry. Strong revenue potential with manageable competition.' :
      marketScore >= 40 ? 
      'Consider market conditions carefully. Moderate opportunity with some challenges.' :
      'Market conditions present significant challenges. High competition or low revenue potential.';

    // Add competition level message to market entry message
    const competitionMessage = 
      competitionLevel.level === 'SATURATED' ? 'Market is heavily saturated with strong competitors.' :
      competitionLevel.level === 'HIGH' ? 'High competition with strong review presence.' :
      competitionLevel.level === 'MODERATE' ? 'Moderate competition with balanced market dynamics.' :
      'Low competition offering good opportunity for new entrants.';
    
    // Combine messages
    const combinedMessage = `${marketEntryMessage} ${competitionMessage}`;
    
    return (
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
        {/* Top 5 Competitors Card - LEFT */}
        <div className={`bg-slate-800/50 rounded-2xl border-2 ${getBorderColorClass(marketEntryUIStatus)} p-6`}>
          <h2 className="text-lg font-semibold text-white mb-4">Top 5 Competitors</h2>
          <div className="space-y-4">
            <div className="bg-slate-700/20 rounded-lg p-3">
              <div className="text-sm text-slate-400 mb-2">Average Reviews</div>
              <div className="flex items-center gap-2">
                {(() => {
                  // Get top 5 competitors by monthly sales
                  const top5 = [...competitors]
                    .sort((a, b) => b.monthlySales - a.monthlySales)
                    .slice(0, 5);
                  
                  // Calculate average reviews
                  const avgReviews = top5.reduce((sum, comp) => 
                    sum + (comp.reviews ? parseFloat(comp.reviews.toString()) : 0), 0) / top5.length;
                  
                  // Determine color and verbal rating
                  let color = "text-yellow-400"; // Decent (default)
                  let rating = "DECENT";
                  
                  if (avgReviews > 1000) {
                    color = "text-red-400";
                    rating = "HIGH";
                  } else if (avgReviews < 300) {
                    color = "text-green-400";
                    rating = "LOW";
                  }
                  
                  return (
                    <>
                      <span className={`text-lg font-medium ${color}`}>
                        {avgReviews ? Math.round(avgReviews).toLocaleString() : 'N/A'}
                      </span>
                      <span className="text-sm font-semibold text-slate-400">({rating})</span>
                    </>
                  );
                })()}
              </div>
            </div>
            <div className="bg-slate-700/20 rounded-lg p-3">
              <div className="text-sm text-slate-400 mb-2">Average Rating</div>
              <div className="flex items-center gap-2">
                {(() => {
                  // Get top 5 competitors by monthly sales
                  const top5 = [...competitors]
                    .sort((a, b) => b.monthlySales - a.monthlySales)
                    .slice(0, 5);
                  
                  // Calculate average rating
                  const validRatings = top5.filter(comp => comp.rating);
                  const avgRating = validRatings.reduce((sum, comp) => 
                    sum + (comp.rating ? parseFloat(comp.rating.toString()) : 0), 0) / validRatings.length;
                  
                  // Determine color and verbal rating
                  let color = "text-yellow-400"; // Average Quality (default)
                  let rating = "AVERAGE QUALITY";
                  
                  if (avgRating >= 4.7) {
                    color = "text-red-400";
                    rating = "HIGH QUALITY";
                  } else if (avgRating < 4.1) {
                    color = "text-green-400";
                    rating = "LOW QUALITY";
                  }
                  
                  return (
                    <>
                      <span className={`text-lg font-medium ${color}`}>
                        {avgRating ? avgRating.toFixed(1) : 'N/A'}
                      </span>
                      <span className={`text-xl ${color}`}>★</span>
                      <span className="text-sm font-semibold text-slate-400">({rating})</span>
                    </>
                  );
                })()}
              </div>
            </div>
            <div className="bg-slate-700/20 rounded-lg p-3">
              <div className="text-sm text-slate-400 mb-2">Average Listing Quality</div>
              <div className="flex items-center gap-2">
                {(() => {
                  // Get top 5 competitors by monthly sales
                  const top5 = [...competitors]
                    .sort((a, b) => b.monthlySales - a.monthlySales)
                    .slice(0, 5);
                  
                  // Calculate average listing score
                  const validScores = top5.filter(comp => comp.score);
                  const avgScore = validScores.reduce((sum, comp) => 
                    sum + (comp.score ? parseFloat(comp.score.toString()) : 0), 0) / validScores.length;
                  
                  // Determine color and verbal rating - with score value
                  let color = "text-yellow-400"; // Average Listings (default)
                  let textRating = "AVERAGE LISTINGS";
                  let numericRating = avgScore ? avgScore.toFixed(1) : 'N/A';
                  
                  if (avgScore >= 8.5) {
                    color = "text-red-400";
                    textRating = "QUALITY LISTINGS";
                  } else if (avgScore < 7) {
                    color = "text-green-400";
                    textRating = "POOR LISTINGS";
                  }
                  
                  // Special case for N/A
                  if (numericRating === 'N/A') {
                    color = "text-red-400";
                    textRating = "HLP ERROR";
                  }
                  
                  return (
                    <>
                      <span className={`text-lg font-medium ${color}`}>
                        {numericRating === 'N/A' ? 'N/A' : numericRating}
                      </span>
                      <span className="text-sm font-semibold text-slate-400">({textRating})</span>
                    </>
                  );
                })()}
              </div>
            </div>
          </div>
        </div>

        {/* Main Assessment Card - CENTER */}
        <div className={`bg-slate-800/50 rounded-2xl border-4 ${getBorderColorClass(marketEntryUIStatus)} 
            shadow-lg ${getGlowColorClass(marketEntryUIStatus)} p-6 transform scale-105`}>
          <div className="flex flex-col items-center text-center h-full">
            <div className={`text-6xl font-bold mb-2 ${getTextColorClass(marketEntryUIStatus)}`}>
              {marketEntryUIStatus}
            </div>
            
            <div className="text-5xl font-bold text-white mb-4">
              {marketScore.toFixed(1)}%
            </div>

            <div className={`text-xl font-medium mb-4 ${getTextColorClass(marketEntryUIStatus)}`}>
              {getAssessmentSummary(marketEntryUIStatus)}
            </div>
            
            <p className="text-slate-300 mb-6 text-sm">
              {combinedMessage}
            </p>

            <div className="w-full mt-auto">
              <div className="relative h-4 bg-slate-700/30 rounded-full overflow-hidden">
                <div 
                  className={`absolute left-0 top-0 h-full rounded-full transition-all duration-500 ${
                    marketScore >= 70 ? 'bg-emerald-500' :
                    marketScore >= 40 ? 'bg-amber-500' :
                    'bg-red-500'
                  }`}
                  style={{ width: `${marketScore}%` }}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Key Market Indicators Card - RIGHT */}
        <div className={`bg-slate-800/50 rounded-2xl border-2 ${getBorderColorClass(marketEntryUIStatus)} p-6`}>
          <h2 className="text-lg font-semibold text-white mb-4">Key Market Indicators</h2>
          <div className="space-y-4">
            <div className="bg-slate-700/20 rounded-lg p-3">
              <div className="text-sm text-slate-400 mb-2">BSR Stability</div>
              <div className="flex items-center gap-2">
                {(() => {
                  // Get average BSR stability from Keepa results
                  const validResults = keepaResults?.filter(result => 
                    result?.analysis?.bsr?.stability !== undefined
                  ) || [];
                  
                  const avgStability = validResults.length 
                    ? validResults.reduce((sum, result) => 
                        sum + (result.analysis.bsr.stability || 0), 0) / validResults.length
                    : 0.5; // Default if no data
                  
                  const score = Math.round(avgStability * 100);
                  
                  // Determine message and color based on score and other factors
                  let message = "Mildly Seasonal";
                  let color = "text-yellow-400"; // Medium
                  let directionIcon = "→";
                  
                  if (score >= 85) {
                    message = "Evergreen";
                    color = "text-emerald-400"; // Great
                  } else if (score >= 70) {
                    message = "Low Seasonality";
                    color = "text-emerald-400"; // Not Bad
                  } else if (score >= 50) {
                    message = "Mildly Seasonal";
                    color = "text-yellow-400"; // Not Bad
                  } else if (score < 35) {
                    message = "Highly Seasonal";
                    color = "text-red-400"; // Bad
                  }
                  
                  // Check for market size indicators
                  const avgBSR = validResults.reduce((sum, result) => {
                    const bsrHistory = result.productData?.bsr || [];
                    if (bsrHistory.length === 0) return sum;
                    
                    // Calculate the average BSR for this competitor
                    const competitorAvgBSR = bsrHistory.reduce(
                      (bsrSum, point) => bsrSum + point.value, 0
                    ) / bsrHistory.length;
                    
                    return sum + competitorAvgBSR;
                  }, 0) / (validResults.length || 1);
                  
                  console.log("Average BSR calculation:", { avgBSR, validResultsCount: validResults.length });
                  
                  // Override with market size assessment if very notable
                  if (avgBSR < 5000) {
                    message = "Large Market";
                    color = "text-emerald-400";
                  } else if (avgBSR > 150000) {
                    message = "Small Market";
                    color = "text-red-400";
                  }
                  
                  // Get most common BSR trend direction
                  const directionCounts = validResults.reduce((counts, result) => {
                    const direction = result.analysis.bsr.trend?.direction || 'stable';
                    counts[direction] = (counts[direction] || 0) + 1;
                    return counts;
                  }, {});
                  
                  const mostCommonDirection = Object.entries(directionCounts)
                    .sort((a, b) => b[1] - a[1])
                    .map(entry => entry[0])[0] || 'stable';
                    
                  // Set direction icon based on trend
                  if (mostCommonDirection === 'up') directionIcon = "↗";
                  else if (mostCommonDirection === 'down') directionIcon = "↘";
                  
                  return (
                    <>
                      <span className={`text-lg font-medium ${color}`}>{message}</span>
                      <span className={`text-xl ${color}`}>{directionIcon}</span>
                    </>
                  );
                })()}
              </div>
            </div>
            <div className="bg-slate-700/20 rounded-lg p-3">
              <div className="text-sm text-slate-400 mb-2">Price Volatility</div>
              <div className="flex items-center gap-2">
                {(() => {
                  // Get average price volatility from Keepa results
                  const validResults = keepaResults?.filter(result => 
                    result?.analysis?.price?.stability !== undefined
                  ) || [];
                  
                  // Calculate volatility (inverse of stability)
                  const avgVolatility = validResults.length 
                    ? validResults.reduce((sum, result) => 
                        sum + (1 - (result.analysis.price.stability || 0)), 0) / validResults.length
                    : 0.3; // Default if no data
                  
                  const score = Math.round(avgVolatility * 100);
                  
                  // Determine color based on volatility (lower is better)
                  let color = "text-yellow-400"; // Medium
                  let label = "Medium";
                  
                  if (score < 25) {
                    color = "text-emerald-400"; // Good (low volatility)
                    label = "Low";
                  } else if (score > 60) {
                    color = "text-red-400"; // Poor (high volatility)
                    label = "High";
                  }
                  
                  return (
                    <>
                      <span className={`text-lg font-medium ${color}`}>{label}</span>
                      <span className="text-sm text-slate-400">({score}%)</span>
                    </>
                  );
                })()}
              </div>
            </div>
            <div className="bg-slate-700/20 rounded-lg p-3">
              <div className="text-sm text-slate-400 mb-2">Market Growth</div>
              <div className="flex items-center gap-2">
                {(() => {
                  // Calculate market growth based on competitor ages
                  const competitorsWithDates = competitors.filter(comp => comp.dateFirstAvailable);
                  
                  if (!competitorsWithDates.length) {
                    return (
                      <span className="text-lg font-medium text-slate-400">N/A</span>
                    );
                  }
                  
                  // Calculate ages and distribution
                  const ages = competitorsWithDates.map(comp => 
                    calculateAge(comp.dateFirstAvailable)
                  );
                  
                  // Calculate percentage of new listings (< 6 months)
                  const newListings = ages.filter(age => age <= 6).length;
                  const growthPercentage = Math.round((newListings / ages.length) * 100);
                  
                  // Determine growth rate and color - HIGH GROWTH IS BAD (inverse)
                  let growthRate = "Medium";
                  let color = "text-yellow-400";
                  let directionIcon = "→";
                  
                  if (growthPercentage >= 30) {
                    growthRate = "High";
                    color = "text-red-400"; // Bad - too many new competitors
                    directionIcon = "↗";
                  } else if (growthPercentage < 10) {
                    growthRate = "Low";
                    color = "text-emerald-400"; // Good - not many new competitors
                    directionIcon = "↘";
                  }
                  
                  return (
                    <>
                      <span className={`text-lg font-medium ${color}`}>{growthRate}</span>
                      <span className={`text-xl ${color}`}>{directionIcon}</span>
                    </>
                  );
                })()}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Now update the render function to include the key metrics and detailed market analysis
  const render = () => {
    // Safely check if we have enough data to render
    if (!competitors?.length || !isClient) {
      return renderLoadingState();
    }

    return (
      <div className="space-y-6">
        {/* Header metrics and main assessment cards */}
        {renderHeaderMetrics()}
        {renderMarketEntryAssessment()}
        
        {/* Analysis Controls - Updated for V4 */}
        <div className="bg-slate-800/50 rounded-2xl border-2 border-blue-500/30 p-6
                        shadow-lg shadow-blue-500/10">
          <div className="flex flex-col items-center text-center">
            <div className="mb-6">
              <h2 className="text-2xl font-semibold text-white mb-2">Competitor Analysis</h2>
              <p className="text-sm text-slate-400">
                Comprehensive market and competitor data
              </p>
            </div>

            <div
              className="group relative w-3/4 py-5 rounded-xl 
                       font-medium text-lg transition-all duration-300
                       bg-emerald-500 text-white shadow-emerald-500/25
                       border border-emerald-400/20"
            >
              <div className="flex items-center justify-center gap-2">
                <CheckCircle2 className="w-5 h-5" />
                <span>Analysis Complete</span>
              </div>
            </div>
          </div>
        </div>
        
        {/* Detailed Competitor Analysis with Tabs */}
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-2xl border border-slate-700/50">
          <h2 className="text-xl font-bold text-white p-6 pb-0">Detailed Competitor Analysis</h2>
          {renderCharts()}
        </div>
        
        {/* Market Share Distribution */}
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-2xl border border-slate-700/50 p-6 mt-8">
          <h2 className="text-lg font-semibold text-white mb-4">Market Share Distribution</h2>
          <div className="h-[400px] w-full">
            {isClient && (
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={competitors.slice(0, 10).map(comp => ({
                      name: comp.title.length > 20 ? comp.title.substring(0, 20) + '...' : comp.title,
                      value: comp.marketShare
                    }))}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    outerRadius={160}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {competitors.slice(0, 10).map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={`hsl(${index * 36}, 70%, 50%)`} />
                    ))}
                  </Pie>
                  <Tooltip 
                    formatter={(value) => {
                      if (typeof value === 'number') {
                        return [`${value.toFixed(2)}%`, 'Market Share'];
                      }
                      return [value, 'Market Share'];
                    }}
                    contentStyle={{ 
                      backgroundColor: '#1e293b', 
                      borderColor: '#334155',
                      borderRadius: '0.5rem',
                      color: '#f8fafc'
                    }}
                  />
                  <Legend formatter={(value) => value.length > 25 ? value.substring(0, 25) + '...' : value} />
                </PieChart>
              </ResponsiveContainer>
            )}
          </div>
        </div>
        
        {/* Keepa Historical Analysis (if available) - Updated for V4 */}
        {keepaResults?.length > 0 && (
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-2xl border border-slate-700/50 p-6">
            <h2 className="text-lg font-semibold text-white mb-4">Historical Analysis (Top Competitor)</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="bg-slate-700/20 rounded-lg p-4">
                  <div className="text-sm text-slate-400 mb-2">Product</div>
                  <div className="text-white font-medium">
                    {keepaResults[0]?.productData?.title || 'Product data unavailable'}
                  </div>
                </div>
                <div className="bg-slate-700/20 rounded-lg p-4">
                  <div className="text-sm text-slate-400 mb-2">BSR Trend (12 Months)</div>
                  <div className="flex items-center gap-2">
                    <span className={`text-lg font-medium ${
                      keepaResults[0]?.analysis?.bsr?.trend?.direction === 'down' ? 'text-emerald-400' :
                      keepaResults[0]?.analysis?.bsr?.trend?.direction === 'up' ? 'text-red-400' :
                      'text-blue-400'
                    }`}>
                      {keepaResults[0]?.analysis?.bsr?.trend?.direction === 'down' ? 'Improving' :
                       keepaResults[0]?.analysis?.bsr?.trend?.direction === 'up' ? 'Declining' :
                       'Stable'}
                    </span>
                    <span className={`text-xl ${
                      keepaResults[0]?.analysis?.bsr?.trend?.direction === 'down' ? 'text-emerald-400' :
                      keepaResults[0]?.analysis?.bsr?.trend?.direction === 'up' ? 'text-red-400' :
                      'text-blue-400'
                    }`}>
                      {keepaResults[0]?.analysis?.bsr?.trend?.direction === 'down' ? '↘' :
                       keepaResults[0]?.analysis?.bsr?.trend?.direction === 'up' ? '↗' :
                       '→'}
                    </span>
                  </div>
                </div>
              </div>
              <div className="space-y-4">
                <div className="bg-slate-700/20 rounded-lg p-4">
                  <div className="text-sm text-slate-400 mb-2">Average BSR</div>
                  <div className="text-white font-medium flex items-center gap-2">
                    {keepaResults[0]?.productData?.bsr?.length > 0 ? (
                      <>
                        <span>
                          #{Math.round(
                            keepaResults[0].productData.bsr.reduce((sum, point) => sum + point.value, 0) / 
                            keepaResults[0].productData.bsr.length
                          ).toLocaleString()}
                        </span>
                        {(() => {
                          const avgBSR = Math.round(
                            keepaResults[0].productData.bsr.reduce((sum, point) => sum + point.value, 0) / 
                            keepaResults[0].productData.bsr.length
                          );
                          
                          if (avgBSR < 50000) {
                            return (
                              <span className="text-xs py-1 px-2 bg-emerald-500/20 text-emerald-400 rounded-full">
                                Good BSR Range
                              </span>
                            );
                          } else if (avgBSR < 100000) {
                            return (
                              <span className="text-xs py-1 px-2 bg-yellow-500/20 text-yellow-400 rounded-full">
                                Acceptable BSR
                              </span>
                            );
                          } else {
                            return (
                              <span className="text-xs py-1 px-2 bg-red-500/20 text-red-400 rounded-full">
                                High BSR
                              </span>
                            );
                          }
                        })()}
                      </>
                    ) : (
                      'N/A'
                    )}
                  </div>
                </div>
                <div className="bg-slate-700/20 rounded-lg p-4">
                  <div className="text-sm text-slate-400 mb-2">Price Trend (12 Months)</div>
                  <div className="flex items-center gap-2">
                    <span className={`text-lg font-medium ${
                      keepaResults[0]?.analysis?.price?.trend?.direction === 'up' ? 'text-emerald-400' :
                      keepaResults[0]?.analysis?.price?.trend?.direction === 'down' ? 'text-red-400' :
                      'text-blue-400'
                    }`}>
                      {keepaResults[0]?.analysis?.price?.trend?.direction === 'up' ? 'Increasing' :
                       keepaResults[0]?.analysis?.price?.trend?.direction === 'down' ? 'Decreasing' :
                       'Stable'}
                    </span>
                    <span className={`text-xl ${
                      keepaResults[0]?.analysis?.price?.trend?.direction === 'up' ? 'text-emerald-400' :
                      keepaResults[0]?.analysis?.price?.trend?.direction === 'down' ? 'text-red-400' :
                      'text-blue-400'
                    }`}>
                      {keepaResults[0]?.analysis?.price?.trend?.direction === 'up' ? '↗' :
                       keepaResults[0]?.analysis?.price?.trend?.direction === 'down' ? '↘' :
                       '→'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Market Insights - Based on V4 Keepa data */}
            <div className="mt-6 bg-slate-700/40 rounded-lg p-5 border-l-4 border-blue-400 shadow-lg">
              <h3 className="text-lg font-medium text-white mb-2">Key V4 Insights</h3>
              <ul className="list-disc list-inside text-slate-300 space-y-2">
                <li>
                  BSR Stability: {((keepaResults[0]?.analysis?.bsr?.stability || 0) * 100).toFixed(0)}% - 
                  <span className={`${(keepaResults[0]?.analysis?.bsr?.stability || 0) > 0.65 ? 'text-emerald-400' : 
                    (keepaResults[0]?.analysis?.bsr?.stability || 0) > 0.4 ? 'text-amber-400' : 'text-red-400'} ml-2`}>
                    {(keepaResults[0]?.analysis?.bsr?.stability || 0) > 0.65 ? 'Very Stable' : 
                     (keepaResults[0]?.analysis?.bsr?.stability || 0) > 0.4 ? 'Moderately Stable' : 'Unstable'}
                  </span>
                </li>
                <li>
                  Price Stability: {((keepaResults[0]?.analysis?.price?.stability || 0) * 100).toFixed(0)}% -
                  <span className={`${(keepaResults[0]?.analysis?.price?.stability || 0) > 0.7 ? 'text-emerald-400' : 
                    (keepaResults[0]?.analysis?.price?.stability || 0) > 0.5 ? 'text-amber-400' : 'text-red-400'} ml-2`}>
                    {(keepaResults[0]?.analysis?.price?.stability || 0) > 0.7 ? 'Very Consistent' : 
                     (keepaResults[0]?.analysis?.price?.stability || 0) > 0.5 ? 'Somewhat Stable' : 'Volatile'}
                  </span>
                </li>
                <li>
                  Competitive Position: {(keepaResults[0]?.analysis?.competitivePosition?.score || 5)}/10 -
                  <span className={`${(keepaResults[0]?.analysis?.competitivePosition?.score || 5) > 7 ? 'text-emerald-400' : 
                    (keepaResults[0]?.analysis?.competitivePosition?.score || 5) > 4 ? 'text-amber-400' : 'text-red-400'} ml-2`}>
                    {(keepaResults[0]?.analysis?.competitivePosition?.score || 5) > 7 ? 'Strong Position' : 
                     (keepaResults[0]?.analysis?.competitivePosition?.score || 5) > 4 ? 'Average Position' : 'Weak Position'}
                  </span>
                </li>
              </ul>
            </div>
          </div>
        )}
        
        {/* Market Visuals */}
        {competitors.length > 0 && (
          <div>
            <MarketVisuals 
              competitors={competitors as any} 
              rawData={keepaResults || []} 
            />
          </div>
        )}

        {/* Chart Container for other tabs */}
        {activeTab !== 'overview' && activeTab !== 'uploadedData' && (
          <div className="bg-slate-800/30 rounded-xl p-6">
            <h3 className="text-lg font-medium text-white mb-4">
              {activeTab === 'age' ? 'Market Age Distribution' : 
              activeTab === 'fulfillment' ? 'Fulfillment Methods' : 'Listing Quality'}
            </h3>
            
            <div className="flex flex-col lg:flex-row max-h-[500px]">
              {/* Left side - Chart */}
              <div className="w-full lg:w-2/5 lg:pr-6">
                <div className="h-[400px] relative">
                  {distributions && (
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={pieChartData}
                          cx="50%"
                          cy="50%"
                          innerRadius={80}
                          outerRadius={150}
                          paddingAngle={4}
                          dataKey="value"
                          labelLine={false}
                        >
                          {activeTab === 'age' && [
                            <Cell key="mature" fill={COLORS.mature} />,
                            <Cell key="established" fill={COLORS.established} />,
                            <Cell key="growing" fill={COLORS.growing} />,
                            <Cell key="new" fill={COLORS.new} />,
                            <Cell key="na" fill="#4B5563" />
                          ].filter((_, i) => {
                            const ageArray = [
                              distributions.age.mature || 0,
                              distributions.age.established || 0,
                              distributions.age.growing || 0,
                              distributions.age.new || 0,
                              distributions.age.na || 0
                            ];
                            return ageArray[i] > 0;
                          })}
                          
                          {activeTab === 'fulfillment' && [
                            <Cell key="fba" fill={COLORS.fba} />,
                            <Cell key="fbm" fill={COLORS.fbm} />,
                            <Cell key="amazon" fill={COLORS.amazon} />,
                            <Cell key="na" fill="#4B5563" />
                          ].filter((_, i) => {
                            const fulfillmentArray = [
                              distributions.fulfillment.fba || 0,
                              distributions.fulfillment.fbm || 0,
                              distributions.fulfillment.amazon || 0,
                              distributions.fulfillment.na || 0
                            ];
                            return fulfillmentArray[i] > 0;
                          })}
                          
                          {activeTab === 'quality' && [
                            <Cell key="exceptional" fill={COLORS.exceptional} />,
                            <Cell key="decent" fill={COLORS.decent} />,
                            <Cell key="poor" fill={COLORS.poor} />,
                            <Cell key="na" fill={COLORS.na} />
                          ].filter((_, i) => {
                            const qualityArray = [
                              distributions.listingQuality.exceptional || 0,
                              distributions.listingQuality.decent || 0,
                              distributions.listingQuality.poor || 0,
                              distributions.listingQuality.na || 0
                            ];
                            return qualityArray[i] > 0;
                          })}
                        </Pie>
                        <Tooltip
                          content={({ active, payload }) => {
                            if (active && payload?.length) {
                              const data = payload[0];
                              return (
                                <div className="bg-slate-800 border border-slate-700 rounded-lg p-3 shadow-xl z-20"
                                    style={{ 
                                      position: 'absolute', 
                                      transform: 'translateY(-20px)'
                                    }}>
                                  <div className="flex items-center gap-2 mb-1">
                                    <div 
                                      className="w-3 h-3 rounded-full" 
                                      style={{ backgroundColor: data.payload.fill || data.color }}
                                    ></div>
                                    <p className="text-slate-300 font-medium">{data.name}</p>
                                  </div>
                                  <p className="text-emerald-400 font-semibold text-lg">
                                    {typeof data.value === 'number' ? data.value.toFixed(1) : data.value}%
                                  </p>
                                  <p className="text-slate-400 text-xs mt-1">
                                    {getCategoryDescription(data.payload.shortName)}
                                  </p>
                                </div>
                              );
                            }
                            return null;
                          }}
                          wrapperStyle={{ zIndex: 100 }}
                        />
                      </PieChart>
                    </ResponsiveContainer>
                  )}
                </div>
              </div>

              {/* Right side - Legend and Competitor Breakdown */}
              <div className="w-full lg:w-3/5 lg:pl-6 mt-6 lg:mt-0 overflow-y-auto">
                {/* Legend */}
                <div className="mb-6">
                  <h4 className="text-base font-medium text-slate-300 mb-3">Distribution</h4>
                  <div className="grid grid-cols-1 gap-x-4 gap-y-3 md:grid-cols-2">
                    {activeTab === 'age' && (
                      <>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-emerald-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Mature: 2+ Years 
                            <span className="text-emerald-400 ml-2 font-bold">
                              ({(distributions.age.mature || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-blue-400 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Established: 1-2 Years 
                            <span className="text-blue-400 ml-2 font-bold">
                              ({(distributions.age.established || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-amber-400 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Growing: 6-12 Months 
                            <span className="text-amber-400 ml-2 font-bold">
                              ({(distributions.age.growing || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-red-400 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            New: 0-6 Months 
                            <span className="text-red-400 ml-2 font-bold">
                              ({(distributions.age.new || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        {(distributions.age.na || 0) > 0 && (
                          <div className="flex items-center">
                            <div className="h-4 w-4 rounded-full bg-purple-500 mr-3"></div>
                            <div className="text-base text-slate-200 font-medium">
                              Not Available 
                              <span className="text-purple-400 ml-2 font-bold">
                                ({(distributions.age.na || 0).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        )}
                      </>
                    )}
                    {activeTab === 'fulfillment' && (
                      <>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-red-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            FBA
                            <span className="text-red-400 ml-2 font-bold">
                              ({(distributions.fulfillment.fba || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-emerald-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            FBM
                            <span className="text-emerald-400 ml-2 font-bold">
                              ({(distributions.fulfillment.fbm || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-amber-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Amazon
                            <span className="text-amber-400 ml-2 font-bold">
                              ({(distributions.fulfillment.amazon || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        {(distributions.fulfillment.na || 0) > 0 && (
                          <div className="flex items-center">
                            <div className="h-4 w-4 rounded-full bg-purple-500 mr-3"></div>
                            <div className="text-base text-slate-200 font-medium">
                              Not Available
                              <span className="text-purple-400 ml-2 font-bold">
                                ({(distributions.fulfillment.na || 0).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        )}
                      </>
                    )}
                    {activeTab === 'quality' && (
                      <>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-red-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Exceptional: 7.5-10
                            <span className="text-red-400 ml-2 font-bold">
                              ({(distributions.listingQuality.exceptional || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-amber-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Decent: 5-7.4
                            <span className="text-amber-400 ml-2 font-bold">
                              ({(distributions.listingQuality.decent || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-emerald-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Poor: 0-4.9
                            <span className="text-emerald-400 ml-2 font-bold">
                              ({(distributions.listingQuality.poor || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        {(distributions.listingQuality.na || 0) > 0 && (
                          <div className="flex items-center">
                            <div className="h-4 w-4 rounded-full bg-purple-500 mr-3"></div>
                            <div className="text-base text-slate-200 font-medium">
                              Not Available
                              <span className="text-purple-400 ml-2 font-bold">
                                ({(distributions.listingQuality.na || 0).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        )}
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Summary Card */}
            <div className="mt-6 bg-slate-700/40 rounded-lg p-5 border-l-4 border-emerald-500 shadow-lg">
              <div className="text-base font-medium text-white">
                {getSummaryText()}
              </div>
            </div>
            
            {/* Comparison section */}
            {showComparison && (
              <div className="mt-6 bg-slate-700/20 rounded-lg p-4 border border-blue-500/20">
                <div className="text-sm text-blue-400 mb-3">Comparison with Category Average</div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center">
                    <div className="w-24 text-xs text-slate-400">
                      {activeTab === 'age' ? 'Maturity:' : 
                       activeTab === 'fulfillment' ? 'FBA %:' : 
                       'Poor Quality %:'}
                    </div>
                    <div className="flex-1 h-1.5 bg-slate-600/30 rounded-full overflow-hidden">
                      <div className="h-full bg-emerald-400 rounded-full" 
                           style={{
                             width: activeTab === 'age' ? `${getMaturityLevel(distributions.age)}%` :
                                    activeTab === 'fulfillment' ? `${distributions.fulfillment.fba || 0}%` :
                                    `${distributions.listingQuality.poor || 0}%`
                           }}></div>
                    </div>
                    <div className="w-16 text-right text-xs text-slate-400 ml-2">
                      {activeTab === 'age' ? `${getMaturityLevel(distributions.age)}%` :
                       activeTab === 'fulfillment' ? `${(distributions.fulfillment.fba || 0).toFixed(1)}%` :
                       `${(distributions.listingQuality.poor || 0).toFixed(1)}%`}
                    </div>
                  </div>
                  <div className="flex items-center">
                    <div className="w-24 text-xs text-slate-400">Category Avg:</div>
                    <div className="flex-1 h-1.5 bg-slate-600/30 rounded-full overflow-hidden">
                      <div className="h-full bg-blue-400 rounded-full" style={{
                        width: activeTab === 'age' ? "65%" :
                               activeTab === 'fulfillment' ? "70%" :
                               "45%"
                      }}></div>
                    </div>
                    <div className="w-16 text-right text-xs text-slate-400 ml-2">
                      {activeTab === 'age' ? "65%" :
                       activeTab === 'fulfillment' ? "70%" :
                       "45%"}
                    </div>
                  </div>
                </div>

                {/* Add Score Breakdown for Overview tab */}
                {activeTab === 'overview' && (
                  <div className="mt-4 pt-4 border-t border-slate-700/50">
                    <h4 className="text-sm font-medium text-white mb-2">Competitor Score Calculation (Weighted V4)</h4>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-2 text-xs text-slate-400">
                      <div>
                        <p className="mb-1 font-medium text-emerald-400">HIGH IMPACT (×1.8-2.0):</p>
                        <ul className="list-disc list-inside space-y-1 pl-2">
                          <li>Monthly Sales (×2.0)</li>
                          <li>Reviews (×1.8)</li>
                        </ul>
                      </div>
                      <div>
                        <p className="mb-1 font-medium text-amber-400">MEDIUM IMPACT (×1.3-1.5):</p>
                        <ul className="list-disc list-inside space-y-1 pl-2">
                          <li>Market Share (×1.5)</li>
                          <li>Monthly Revenue (×1.5)</li>
                          <li>BSR Ranking (×1.3)</li>
                          <li>Rating (×1.3)</li>
                          <li>Review Share (×1.3)</li>
                        </ul>
                      </div>
                      <div>
                        <p className="mb-1 font-medium text-slate-300">LOW IMPACT (×0.8-1.0):</p>
                        <ul className="list-disc list-inside space-y-1 pl-2">
                          <li>Price (×1.0)</li>
                          <li>Fulfillment Method (×0.8)</li>
                          <li>Listing Quality (×0.8)</li>
                        </ul>
                      </div>
                    </div>
                    <div className="mt-3 text-xs">
                      <p className="text-slate-400 mb-1">Each metric is scored 1-10 points and then weighted by importance. The final score is calculated as a percentage of total weighted points possible.</p>
                      <div className="mt-2">
                        <span className="inline-block px-2 py-0.5 bg-red-900/20 text-red-400 rounded-full mr-2">STRONG ≥ 60%</span>
                        <span className="inline-block px-2 py-0.5 bg-amber-900/20 text-amber-400 rounded-full mr-2">DECENT ≥ 45%</span>
                        <span className="inline-block px-2 py-0.5 bg-emerald-900/20 text-emerald-400 rounded-full">WEAK &lt; 45%</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Uploaded Data Tab Content */}
        {activeTab === 'uploadedData' && (
          <div className="bg-slate-800/30 rounded-xl p-6">
            <h3 className="text-lg font-medium text-white mb-4">User Uploaded Data</h3>
            
            <div className="overflow-x-auto">
              <div className="max-h-[500px] overflow-y-auto">
                <table className="w-full text-left">
                  <thead className="border-b border-slate-700/50 sticky top-0 bg-slate-800/90 z-10">
                    <tr>
                      <th className="p-3 text-sm text-slate-400">No</th>
                      <th className="p-3 text-sm text-slate-400">ASIN</th>
                      <th className="p-3 text-sm text-slate-400">Brand</th>
                      <th className="p-3 text-sm text-slate-400">Product Title</th>
                      <th className="p-3 text-sm text-slate-400">Category</th>
                      <th className="p-3 text-sm text-slate-400">Price</th>
                      <th className="p-3 text-sm text-slate-400">BSR</th>
                      <th className="p-3 text-sm text-slate-400">Listing Score</th>
                      <th className="p-3 text-sm text-slate-400">Monthly Sales</th>
                      <th className="p-3 text-sm text-slate-400">Monthly Revenue</th>
                      <th className="p-3 text-sm text-slate-400">Rating</th>
                      <th className="p-3 text-sm text-slate-400">Reviews</th>
                      <th className="p-3 text-sm text-slate-400">Fulfilled By</th>
                      <th className="p-3 text-sm text-slate-400">Product Type</th>
                      <th className="p-3 text-sm text-slate-400">Seller Country</th>
                      <th className="p-3 text-sm text-slate-400">Date First Available</th>
                    </tr>
                  </thead>
                  <tbody>
                    {competitors.map((competitor, index) => {
                      return (
                        <tr key={competitor.asin || index} className="border-b border-slate-700/50 hover:bg-slate-700/30">
                          <td className="p-3 text-white">{index + 1}</td>
                          <td className="p-3 text-white">
                            <a 
                              href={`https://www.amazon.com/dp/${extractAsin(competitor.asin)}`} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-emerald-400 hover:underline"
                            >
                              {extractAsin(competitor.asin)}
                            </a>
                          </td>
                          <td className="p-3 text-white">{competitor.brand || '-'}</td>
                          <td className="p-3 text-white truncate max-w-xs">{competitor.title || '-'}</td>
                          <td className="p-3 text-white">{competitor.category || '-'}</td>
                          <td className="p-3 text-white">{formatCurrency(competitor.price) || '-'}</td>
                          <td className="p-3 text-white">{competitor.bsr ? formatNumber(competitor.bsr) : '-'}</td>
                          <td className="p-3 text-white">{competitor.score ? parseFloat(competitor.score.toString()).toFixed(1) : '-'}</td>
                          <td className="p-3 text-white">{formatNumber(competitor.monthlySales) || '-'}</td>
                          <td className="p-3 text-white">{formatCurrency(competitor.monthlyRevenue) || '-'}</td>
                          <td className="p-3 text-white">{competitor.rating ? parseFloat(competitor.rating.toString()).toFixed(1) : '-'}</td>
                          <td className="p-3 text-white">{typeof competitor.reviews === 'number' ? formatNumber(competitor.reviews) : competitor.reviews || '-'}</td>
                          <td className="p-3 text-white">{competitor.fulfillment || competitor.fulfillmentMethod || competitor.fulfilledBy || '-'}</td>
                          <td className="p-3 text-white">{competitor.productType || '-'}</td>
                          <td className="p-3 text-white">{competitor.sellerCountry || '-'}</td>
                          <td className="p-3 text-white">{competitor.dateFirstAvailable || '-'}</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Main return
  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-2xl border border-slate-700/50">
      {render()}
    </div>
  );
};

export default ProductVettingResults;// Helper function to extract fulfillment method
const extractFulfillmentMethod = (competitor: Competitor): string => {
  if (competitor?.fulfillment) {
    return competitor.fulfillment;
  }
  if (competitor?.fulfillmentMethod) {
    return competitor.fulfillmentMethod;
  }
  if (competitor?.fulfilledBy) {
    return competitor.fulfilledBy;
  }
  return 'Unknown';
};
