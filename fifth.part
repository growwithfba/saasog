
// Helper function to extract fulfillment method
const extractFulfillmentMethod = (competitor: Competitor): string => {
  if (competitor?.fulfillment) {
    return competitor.fulfillment;
  }
  if (competitor?.fulfillmentMethod) {
    return competitor.fulfillmentMethod;
  }
  if (competitor?.fulfilledBy) {
    return competitor.fulfilledBy;
  }
  return 'Unknown';
};

// Add the CompetitorScoreDetails component definition
const CompetitorScoreDetails = ({ score, competitor }) => {
  const [showDetails, setShowDetails] = useState(false);
  
  // Define the same weighting factors from scoring.ts
  const weights = {
    // HIGHEST IMPACT
    monthlySales: 2.0,
    reviews: 1.8,
    
    // MEDIUM IMPACT
    marketShare: 1.5,
    monthlyRevenue: 1.5,
    bsr: 1.3,
    rating: 1.3,
    reviewShare: 1.3,
    
    // LOWEST IMPACT
    price: 1.0,
    fulfillment: 0.8,
    listingScore: 0.8
  };
  
  if (!competitor) return null;
  
  // Calculate raw scores
  const priceScore = MetricScoring.price(competitor.price);
  const bsrScore = MetricScoring.bsr(competitor.bsr);
  const salesScore = MetricScoring.monthlySales(competitor.monthlySales);
  const revenueScore = MetricScoring.monthlyRevenue(competitor.monthlyRevenue);
  const ratingScore = MetricScoring.rating(competitor.rating);
  const reviewsScore = MetricScoring.reviews(competitor.reviews);
  const fulfillmentScore = MetricScoring.fulfillment(competitor.fulfilledBy || competitor.fulfillment);
  const listingScore = competitor.score !== null && competitor.score !== undefined ? 
    MetricScoring.listingScore(competitor.score) : null;
  
  return (
    <div className="relative">
      <button
        onClick={() => setShowDetails(!showDetails)}
        className="inline-flex items-center text-xs text-blue-400 hover:text-blue-300"
      >
        <Info className="w-3 h-3 mr-1" /> Details
      </button>
      
      {showDetails && (
        <div className="absolute z-50 w-80 bg-slate-800 border border-slate-700 rounded-lg p-3 shadow-xl right-0 mt-2">
          <div className="text-xs text-slate-400 mb-2">
            <h4 className="text-white text-sm font-medium mb-1">Score Breakdown</h4>
            <div className="text-xs text-slate-300 mb-2">Showing raw scores with weight multipliers</div>
            <div className="space-y-1.5">
              <div className="grid grid-cols-12">
                <span className="col-span-5">Metric</span>
                <span className="col-span-2">Raw</span>
                <span className="col-span-2">Weight</span>
                <span className="col-span-3">Weighted</span>
              </div>
            
              {/* High Impact */}
              <div className="border-t border-slate-700 py-1">
                <div className="text-slate-300 font-medium mb-1">HIGH IMPACT</div>
              </div>
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">Monthly Sales:</span>
                <span className="col-span-2">{salesScore}/10</span>
                <span className="col-span-2">×{weights.monthlySales}</span>
                <span className="col-span-3 text-emerald-400">{(salesScore * weights.monthlySales).toFixed(1)}</span>
              </div>
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">Reviews:</span>
                <span className="col-span-2">{reviewsScore}/10</span>
                <span className="col-span-2">×{weights.reviews}</span>
                <span className="col-span-3 text-emerald-400">{(reviewsScore * weights.reviews).toFixed(1)}</span>
              </div>
              
              {/* Medium Impact */}
              <div className="border-t border-slate-700 py-1">
                <div className="text-slate-300 font-medium mb-1">MEDIUM IMPACT</div>
              </div>
              
              {competitor.marketShare !== undefined && competitor.marketShare !== null && (
                <div className="grid grid-cols-12 items-center">
                  <span className="col-span-5">Market Share:</span>
                  <span className="col-span-2">{Math.min(10, Math.max(1, Math.ceil(competitor.marketShare / 3)))}/10</span>
                  <span className="col-span-2">×{weights.marketShare}</span>
                  <span className="col-span-3 text-emerald-400">
                    {(Math.min(10, Math.max(1, Math.ceil(competitor.marketShare / 3))) * weights.marketShare).toFixed(1)}
                  </span>
                </div>
              )}
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">Monthly Revenue:</span>
                <span className="col-span-2">{revenueScore}/10</span>
                <span className="col-span-2">×{weights.monthlyRevenue}</span>
                <span className="col-span-3 text-emerald-400">{(revenueScore * weights.monthlyRevenue).toFixed(1)}</span>
              </div>
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">BSR:</span>
                <span className="col-span-2">{bsrScore}/10</span>
                <span className="col-span-2">×{weights.bsr}</span>
                <span className="col-span-3 text-emerald-400">{(bsrScore * weights.bsr).toFixed(1)}</span>
              </div>
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">Rating:</span>
                <span className="col-span-2">{ratingScore}/10</span>
                <span className="col-span-2">×{weights.rating}</span>
                <span className="col-span-3 text-emerald-400">{(ratingScore * weights.rating).toFixed(1)}</span>
              </div>
              
              {competitor.reviewShare !== undefined && competitor.reviewShare !== null && (
                <div className="grid grid-cols-12 items-center">
                  <span className="col-span-5">Review Share:</span>
                  <span className="col-span-2">{Math.min(10, Math.max(1, Math.ceil(competitor.reviewShare / 3)))}/10</span>
                  <span className="col-span-2">×{weights.reviewShare}</span>
                  <span className="col-span-3 text-emerald-400">
                    {(Math.min(10, Math.max(1, Math.ceil(competitor.reviewShare / 3))) * weights.reviewShare).toFixed(1)}
                  </span>
                </div>
              )}
              
              {/* Low Impact */}
              <div className="border-t border-slate-700 py-1">
                <div className="text-slate-300 font-medium mb-1">LOW IMPACT</div>
              </div>
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">Price:</span>
                <span className="col-span-2">{priceScore}/10</span>
                <span className="col-span-2">×{weights.price}</span>
                <span className="col-span-3 text-emerald-400">{(priceScore * weights.price).toFixed(1)}</span>
              </div>
              
              <div className="grid grid-cols-12 items-center">
                <span className="col-span-5">Fulfillment:</span>
                <span className="col-span-2">{fulfillmentScore}/10</span>
                <span className="col-span-2">×{weights.fulfillment}</span>
                <span className="col-span-3 text-emerald-400">{(fulfillmentScore * weights.fulfillment).toFixed(1)}</span>
              </div>
              
              {listingScore !== null && (
                <div className="grid grid-cols-12 items-center">
                  <span className="col-span-5">Listing Score:</span>
                  <span className="col-span-2">{listingScore}/10</span>
                  <span className="col-span-2">×{weights.listingScore}</span>
                  <span className="col-span-3 text-emerald-400">{(listingScore * weights.listingScore).toFixed(1)}</span>
                </div>
              )}
              
              <div className="border-t border-slate-700 pt-1 mt-1 font-medium">
                <div className="flex justify-between text-white">
                  <span>Total Score:</span>
                  <span>{score}%</span>
                </div>
              </div>
            </div>
          </div>
          <button 
            onClick={() => setShowDetails(false)}
            className="absolute top-2 right-2 text-slate-500 hover:text-slate-300"
          >
            <X className="w-3 h-3" />
          </button>
        </div>
      )}
    </div>
  );
};

export default ProductVettingResults;