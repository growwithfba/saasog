  // Moved renderCharts inside component to access state variables
  const renderCharts = () => {
    // Server-side or initial render placeholder
    if (typeof window === 'undefined' || !isClient) {
      return (
        <div className="p-8">
          <div className="flex animate-pulse">
            <div className="w-2/5 h-64 bg-slate-800/30 rounded-xl"></div>
            <div className="w-3/5 h-64 ml-6 bg-slate-800/30 rounded-xl"></div>
          </div>
        </div>
      );
    }

    // Calculate total reviews for the review share column
    const totalReviews = competitors.reduce((sum, comp) => {
      const reviewValue = typeof comp.reviews === 'string' ? 
        parseFloat(comp.reviews) : (comp.reviews || 0);
      return sum + reviewValue;
    }, 0);

    // Process competitor data for the breakdown table
    const competitorBreakdown = (() => {
      if (activeTab === 'fulfillment') {
        return competitors.map(comp => ({
          name: comp.title?.length > 30 ? comp.title.substring(0, 30) + '...' : comp.title || 'Unknown Product',
          asin: comp.asin,
          value: comp.fulfillmentMethod || comp.fulfillment || comp.fulfilledBy || extractFulfillmentMethod(comp) || 'N/A'
        }));
      } else if (activeTab === 'age') {
        return competitors.map(comp => ({
          name: comp.title?.length > 30 ? comp.title.substring(0, 30) + '...' : comp.title || 'Unknown Product',
          asin: comp.asin,
          value: comp.dateFirstAvailable ? calculateAge(comp.dateFirstAvailable) : 'N/A',
          category: comp.dateFirstAvailable ? 
            (calculateAge(comp.dateFirstAvailable) >= 24 ? 'Mature' : 
              calculateAge(comp.dateFirstAvailable) >= 12 ? 'Established' :
              calculateAge(comp.dateFirstAvailable) >= 6 ? 'Growing' : 'New') : 'N/A'
        }));
      } else {
        return competitors.map(comp => ({
          name: comp.title?.length > 30 ? comp.title.substring(0, 30) + '...' : comp.title || 'Unknown Product',
          asin: comp.asin,
          value: comp.score ? parseFloat(comp.score.toString()).toFixed(1) : 'N/A',
          category: comp.score ? 
            (parseFloat(comp.score.toString()) >= 7.5 ? 'Exceptional' : 
              parseFloat(comp.score.toString()) >= 5 ? 'Decent' : 'Poor') : 'N/A'
        }));
      }
    })();

    // Helper for category descriptions
    const getCategoryDescription = (category) => {
      if (activeTab === 'age') {
        return {
          'Mature': 'Products in market for 2+ years',
          'Established': 'Products in market for 1-2 years',
          'Growing': 'Products in market for 6-12 months',
          'New': 'Products in market for 0-6 months'
        }[category] || '';
      } else if (activeTab === 'fulfillment') {
        return {
          'FBA': 'Fulfilled by Amazon - Prime eligible',
          'FBM': 'Fulfilled by Merchant - Seller handles shipping',
          'Amazon': 'Sold & shipped by Amazon directly'
        }[category] || '';
      } else {
        return {
          'Exceptional': 'High quality listings (7.5-10)',
          'Decent': 'Average quality listings (5-7.4)',
          'Poor': 'Below average listings (0-4.9)'
        }[category] || '';
      }
    };

    const getSummaryText = () => {
      if (activeTab === 'age') {
        const maturityLevel = getMaturityLevel(distributions.age);
        return parseFloat(maturityLevel) > 60 
          ? `${maturityLevel}% maturity indicates an established market with stable demand and potentially high barriers to entry.`
          : `${maturityLevel}% maturity suggests a growing market with opportunities for new entrants.`;
      } else if (activeTab === 'fulfillment') {
        return `${(distributions.fulfillment.fba || 0).toFixed(1)}% FBA indicates ${distributions.fulfillment.fba > 70 ? 'high' : 'moderate'} 
          competition for Prime customers.`;
      } else {
        const poorPercentage = (distributions.listingQuality.poor || 0).toFixed(1);
        return `${poorPercentage}% Poor quality listings represent ${parseFloat(poorPercentage) > 40 ? 'a significant' : 'an'} 
          opportunity to differentiate with better content.`;
      }
    };

    const getPieChartData = () => {
      if (activeTab === 'age') {
        return [
          { name: 'Mature (2+ years)', shortName: 'Mature', value: distributions.age.mature || 0 },
          { name: 'Established (1-2 years)', shortName: 'Established', value: distributions.age.established || 0 },
          { name: 'Growing (6-12 months)', shortName: 'Growing', value: distributions.age.growing || 0 },
          { name: 'New (0-6 months)', shortName: 'New', value: distributions.age.new || 0 },
          { name: 'N/A', shortName: 'N/A', value: distributions.age.na || 0 }
        ].filter(item => item.value > 0);
      } else if (activeTab === 'fulfillment') {
        return [
          { name: 'FBA', shortName: 'FBA', value: distributions.fulfillment.fba || 0 },
          { name: 'FBM', shortName: 'FBM', value: distributions.fulfillment.fbm || 0 },
          { name: 'Amazon', shortName: 'Amazon', value: distributions.fulfillment.amazon || 0 },
          { name: 'N/A', shortName: 'N/A', value: distributions.fulfillment.na || 0 }
        ].filter(item => item.value > 0);
      } else {
        return [
          { name: 'Exceptional (7.5-10)', shortName: 'Exceptional', value: distributions.listingQuality.exceptional || 0 },
          { name: 'Decent (5-7.4)', shortName: 'Decent', value: distributions.listingQuality.decent || 0 },
          { name: 'Poor (0-4.9)', shortName: 'Poor', value: distributions.listingQuality.poor || 0 },
          { name: 'N/A', shortName: 'N/A', value: distributions.listingQuality.na || 0 }
        ].filter(item => item.value > 0);
      }
    };

    const pieChartData = getPieChartData();

    return (
      <div className="p-8">
        {/* Tab Navigation */}
        <div className="flex mb-6 border-b border-slate-700/50 overflow-x-auto">
          <button
            className={`px-6 py-3 flex items-center gap-2 text-sm font-medium rounded-t-lg transition-all ${
              activeTab === 'overview' 
                ? 'bg-slate-700/30 text-emerald-400 border-b-2 border-emerald-400' 
                : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700/20'
            }`}
            onClick={() => setActiveTab('overview')}
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M4 6h16M4 10h16M4 14h16M4 18h16" />
            </svg>
            Competitor Overview
          </button>
          
          <button
            className={`px-6 py-3 flex items-center gap-2 text-sm font-medium rounded-t-lg transition-all ${
              activeTab === 'age' 
                ? 'bg-slate-700/30 text-emerald-400 border-b-2 border-emerald-400' 
                : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700/20'
            }`}
            onClick={() => setActiveTab('age')}
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Market Age Distribution
          </button>
          
          <button
            className={`px-6 py-3 flex items-center gap-2 text-sm font-medium rounded-t-lg transition-all ${
              activeTab === 'fulfillment' 
                ? 'bg-slate-700/30 text-emerald-400 border-b-2 border-emerald-400' 
                : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700/20'
            }`}
            onClick={() => setActiveTab('fulfillment')}
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
            </svg>
            Fulfillment Methods
          </button>
          
          <button
            className={`px-6 py-3 flex items-center gap-2 text-sm font-medium rounded-t-lg transition-all ${
              activeTab === 'quality' 
                ? 'bg-slate-700/30 text-emerald-400 border-b-2 border-emerald-400' 
                : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700/20'
            }`}
            onClick={() => setActiveTab('quality')}
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
            </svg>
            Listing Quality
          </button>
        </div>
        
        {/* Compare to Average button */}
        <div className="flex justify-end mb-4">
          <button 
            className="text-xs px-3 py-1.5 bg-slate-700/30 hover:bg-slate-700/50 
                      text-slate-300 rounded-lg flex items-center gap-1"
            onClick={() => setShowComparison(!showComparison)}
          >
            <svg className="w-3.5 h-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            {showComparison ? 'Hide Comparison' : 'Compare to Average'}
          </button>
        </div>
        
        {/* Competitor Overview Tab Content */}
        {activeTab === 'overview' && (
          <div className="overflow-x-auto">
            <div className="max-h-[500px] overflow-y-auto">
              <table className="w-full text-left">
                <thead className="border-b border-slate-700/50 sticky top-0 bg-slate-800/90 z-10">
                  <tr>
                    <th className="p-3 text-sm text-slate-400">Rank</th>
                    <th className="p-3 text-sm text-slate-400">Title</th>
                    <th className="p-3 text-sm text-slate-400">Monthly Revenue</th>
                    <th className="p-3 text-sm text-slate-400">Market Share</th>
                    <th className="p-3 text-sm text-slate-400">Review Share</th>
                    <th className="p-3 text-sm text-slate-400">Competitor Score</th>
                    <th className="p-3 text-sm text-slate-400">Strength</th>
                  </tr>
                </thead>
                <tbody>
                  {competitors.map((competitor, index) => {
                    // Use the V5 scoring calculation from scoring.ts
                    const competitorScore = parseFloat(calculateScore(competitor));
                    const strength = getCompetitorStrength(competitorScore);
                    const reviewValue = typeof competitor.reviews === 'string' ? 
                      parseFloat(competitor.reviews) : (competitor.reviews || 0);
                    const reviewShare = totalReviews > 0 
                      ? (reviewValue / totalReviews * 100) 
                      : 0;
                    
                    // Map the strength color to Tailwind CSS classes
                    const strengthColorClass = 
                      strength.color === 'red' ? 'bg-red-900/20 text-red-400' : 
                      strength.color === 'yellow' ? 'bg-amber-900/20 text-amber-400' :
                      'bg-emerald-900/20 text-emerald-400';
                    
                    return (
                      <tr key={competitor.asin || index} className="border-b border-slate-700/50 hover:bg-slate-700/30">
                        <td className="p-3 text-white">{index + 1}</td>
                        <td className="p-3 text-white truncate max-w-xs">{competitor.title}</td>
                        <td className="p-3 text-white">{formatCurrency(competitor.monthlyRevenue)}</td>
                        <td className="p-3 text-white">{competitor.marketShare.toFixed(2)}%</td>
                        <td className="p-3 text-white">{reviewShare.toFixed(2)}%</td>
                        <td className="p-3 text-white">{competitorScore.toFixed(2)}%
                          <CompetitorScoreDetails score={competitorScore.toFixed(2)} competitor={competitor} />
                        </td>
                        <td className="p-3">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${strengthColorClass}`}>
                            {strength.label}
                          </span>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Chart Container for other tabs */}
        {activeTab !== 'overview' && (
          <div className="bg-slate-800/30 rounded-xl p-6">
            <h3 className="text-lg font-medium text-white mb-4">
              {activeTab === 'age' ? 'Market Age Distribution' : 
              activeTab === 'fulfillment' ? 'Fulfillment Methods' : 'Listing Quality'}
            </h3>
            
            <div className="flex flex-col lg:flex-row max-h-[500px]">
              {/* Left side - Chart */}
              <div className="w-full lg:w-2/5 lg:pr-6">
                <div className="h-[400px] relative">
                  {distributions && (
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={pieChartData}
                          cx="50%"
                          cy="50%"
                          innerRadius={80}
                          outerRadius={150}
                          paddingAngle={4}
                          dataKey="value"
                          labelLine={false}
                        >
                          {activeTab === 'age' && [
                            <Cell key="mature" fill={COLORS.mature} />,
                            <Cell key="established" fill={COLORS.established} />,
                            <Cell key="growing" fill={COLORS.growing} />,
                            <Cell key="new" fill={COLORS.new} />,
                            <Cell key="na" fill="#4B5563" />
                          ].filter((_, i) => {
                            const ageArray = [
                              distributions.age.mature || 0,
                              distributions.age.established || 0,
                              distributions.age.growing || 0,
                              distributions.age.new || 0,
                              distributions.age.na || 0
                            ];
                            return ageArray[i] > 0;
                          })}
                          
                          {activeTab === 'fulfillment' && [
                            <Cell key="fba" fill={COLORS.fba} />,
                            <Cell key="fbm" fill={COLORS.fbm} />,
                            <Cell key="amazon" fill={COLORS.amazon} />,
                            <Cell key="na" fill="#4B5563" />
                          ].filter((_, i) => {
                            const fulfillmentArray = [
                              distributions.fulfillment.fba || 0,
                              distributions.fulfillment.fbm || 0,
                              distributions.fulfillment.amazon || 0,
                              distributions.fulfillment.na || 0
                            ];
                            return fulfillmentArray[i] > 0;
                          })}
                          
                          {activeTab === 'quality' && [
                            <Cell key="exceptional" fill={COLORS.exceptional} />,
                            <Cell key="decent" fill={COLORS.decent} />,
                            <Cell key="poor" fill={COLORS.poor} />,
                            <Cell key="na" fill={COLORS.na} />
                          ].filter((_, i) => {
                            const qualityArray = [
                              distributions.listingQuality.exceptional || 0,
                              distributions.listingQuality.decent || 0,
                              distributions.listingQuality.poor || 0,
                              distributions.listingQuality.na || 0
                            ];
                            return qualityArray[i] > 0;
                          })}
                        </Pie>
                        <Tooltip
                          content={({ active, payload }) => {
                            if (active && payload?.length) {
                              const data = payload[0];
                              return (
                                <div className="bg-slate-800 border border-slate-700 rounded-lg p-3 shadow-xl z-20"
                                    style={{ 
                                      position: 'absolute', 
                                      transform: 'translateY(-20px)'
                                    }}>
                                  <div className="flex items-center gap-2 mb-1">
                                    <div 
                                      className="w-3 h-3 rounded-full" 
                                      style={{ backgroundColor: data.payload.fill || data.color }}
                                    ></div>
                                    <p className="text-slate-300 font-medium">{data.name}</p>
                                  </div>
                                  <p className="text-emerald-400 font-semibold text-lg">
                                    {typeof data.value === 'number' ? data.value.toFixed(1) : data.value}%
                                  </p>
                                  <p className="text-slate-400 text-xs mt-1">
                                    {getCategoryDescription(data.payload.shortName)}
                                  </p>
                                </div>
                              );
                            }
                            return null;
                          }}
                          wrapperStyle={{ zIndex: 100 }}
                        />
                      </PieChart>
                    </ResponsiveContainer>
                  )}
                </div>
              </div>

              {/* Right side - Legend and Competitor Breakdown */}
              <div className="w-full lg:w-3/5 lg:pl-6 mt-6 lg:mt-0 overflow-y-auto">
                {/* Legend */}
                <div className="mb-6">
                  <h4 className="text-base font-medium text-slate-300 mb-3">Distribution</h4>
                  <div className="grid grid-cols-1 gap-x-4 gap-y-3 md:grid-cols-2">
                    {activeTab === 'age' && (
                      <>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-emerald-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Mature: 2+ Years 
                            <span className="text-emerald-400 ml-2 font-bold">
                              ({(distributions.age.mature || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-blue-400 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Established: 1-2 Years 
                            <span className="text-blue-400 ml-2 font-bold">
                              ({(distributions.age.established || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-amber-400 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Growing: 6-12 Months 
                            <span className="text-amber-400 ml-2 font-bold">
                              ({(distributions.age.growing || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-red-400 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            New: 0-6 Months 
                            <span className="text-red-400 ml-2 font-bold">
                              ({(distributions.age.new || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        {(distributions.age.na || 0) > 0 && (
                          <div className="flex items-center">
                            <div className="h-4 w-4 rounded-full bg-purple-500 mr-3"></div>
                            <div className="text-base text-slate-200 font-medium">
                              Not Available 
                              <span className="text-purple-400 ml-2 font-bold">
                                ({(distributions.age.na || 0).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        )}
                      </>
                    )}
                    {activeTab === 'fulfillment' && (
                      <>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-red-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            FBA
                            <span className="text-red-400 ml-2 font-bold">
                              ({(distributions.fulfillment.fba || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-emerald-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            FBM
                            <span className="text-emerald-400 ml-2 font-bold">
                              ({(distributions.fulfillment.fbm || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-amber-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Amazon
                            <span className="text-amber-400 ml-2 font-bold">
                              ({(distributions.fulfillment.amazon || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        {(distributions.fulfillment.na || 0) > 0 && (
                          <div className="flex items-center">
                            <div className="h-4 w-4 rounded-full bg-purple-500 mr-3"></div>
                            <div className="text-base text-slate-200 font-medium">
                              Not Available
                              <span className="text-purple-400 ml-2 font-bold">
                                ({(distributions.fulfillment.na || 0).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        )}
                      </>
                    )}
                    {activeTab === 'quality' && (
                      <>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-red-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Exceptional: 7.5-10
                            <span className="text-red-400 ml-2 font-bold">
                              ({(distributions.listingQuality.exceptional || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-amber-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Decent: 5-7.4
                            <span className="text-amber-400 ml-2 font-bold">
                              ({(distributions.listingQuality.decent || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="h-4 w-4 rounded-full bg-emerald-500 mr-3"></div>
                          <div className="text-base text-slate-200 font-medium">
                            Poor: 0-4.9
                            <span className="text-emerald-400 ml-2 font-bold">
                              ({(distributions.listingQuality.poor || 0).toFixed(1)}%)
                            </span>
                          </div>
                        </div>
                        {(distributions.listingQuality.na || 0) > 0 && (
                          <div className="flex items-center">
                            <div className="h-4 w-4 rounded-full bg-purple-500 mr-3"></div>
                            <div className="text-base text-slate-200 font-medium">
                              Not Available
                              <span className="text-purple-400 ml-2 font-bold">
                                ({(distributions.listingQuality.na || 0).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        )}
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Summary Card */}
            <div className="mt-6 bg-slate-700/40 rounded-lg p-5 border-l-4 border-emerald-500 shadow-lg">
              <div className="text-base font-medium text-white">
                {getSummaryText()}
              </div>
            </div>
            
            {/* Comparison section */}
            {showComparison && (
              <div className="mt-6 bg-slate-700/20 rounded-lg p-4 border border-blue-500/20">
                <div className="text-sm text-blue-400 mb-3">Comparison with Category Average</div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center">
                    <div className="w-24 text-xs text-slate-400">
                      {activeTab === 'age' ? 'Maturity:' : 
                       activeTab === 'fulfillment' ? 'FBA %:' : 
                       'Poor Quality %:'}
                    </div>
                    <div className="flex-1 h-1.5 bg-slate-600/30 rounded-full overflow-hidden">
                      <div className="h-full bg-emerald-400 rounded-full" 
                           style={{
                             width: activeTab === 'age' ? `${getMaturityLevel(distributions.age)}%` :
                                    activeTab === 'fulfillment' ? `${distributions.fulfillment.fba || 0}%` :
                                    `${distributions.listingQuality.poor || 0}%`
                           }}></div>
                    </div>
                    <div className="w-16 text-right text-xs text-slate-400 ml-2">
                      {activeTab === 'age' ? `${getMaturityLevel(distributions.age)}%` :
                       activeTab === 'fulfillment' ? `${(distributions.fulfillment.fba || 0).toFixed(1)}%` :
                       `${(distributions.listingQuality.poor || 0).toFixed(1)}%`}
                    </div>
                  </div>
                  <div className="flex items-center">
                    <div className="w-24 text-xs text-slate-400">Category Avg:</div>
                    <div className="flex-1 h-1.5 bg-slate-600/30 rounded-full overflow-hidden">
                      <div className="h-full bg-blue-400 rounded-full" style={{
                        width: activeTab === 'age' ? "65%" :
                               activeTab === 'fulfillment' ? "70%" :
                               "45%"
                      }}></div>
                    </div>
                    <div className="w-16 text-right text-xs text-slate-400 ml-2">
                      {activeTab === 'age' ? "65%" :
                       activeTab === 'fulfillment' ? "70%" :
                       "45%"}
                    </div>
                  </div>
                </div>

                {/* Add Score Breakdown for Overview tab */}
                {activeTab === 'overview' && (
                  <div className="mt-4 pt-4 border-t border-slate-700/50">
                    <h4 className="text-sm font-medium text-white mb-2">Competitor Score Calculation (Weighted V4)</h4>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-2 text-xs text-slate-400">
                      <div>
                        <p className="mb-1 font-medium text-emerald-400">HIGH IMPACT (×1.8-2.0):</p>
                        <ul className="list-disc list-inside space-y-1 pl-2">
                          <li>Monthly Sales (×2.0)</li>
                          <li>Reviews (×1.8)</li>
                        </ul>
                      </div>
                      <div>
                        <p className="mb-1 font-medium text-amber-400">MEDIUM IMPACT (×1.3-1.5):</p>
                        <ul className="list-disc list-inside space-y-1 pl-2">
                          <li>Market Share (×1.5)</li>
                          <li>Monthly Revenue (×1.5)</li>
                          <li>BSR Ranking (×1.3)</li>
                          <li>Rating (×1.3)</li>
                          <li>Review Share (×1.3)</li>
                        </ul>
                      </div>
                      <div>
                        <p className="mb-1 font-medium text-slate-300">LOW IMPACT (×0.8-1.0):</p>
                        <ul className="list-disc list-inside space-y-1 pl-2">
                          <li>Price (×1.0)</li>
                          <li>Fulfillment Method (×0.8)</li>
                          <li>Listing Quality (×0.8)</li>
                        </ul>
                      </div>
                    </div>
                    <div className="mt-3 text-xs">
                      <p className="text-slate-400 mb-1">Each metric is scored 1-10 points and then weighted by importance. The final score is calculated as a percentage of total weighted points possible.</p>
                      <div className="mt-2">
                        <span className="inline-block px-2 py-0.5 bg-red-900/20 text-red-400 rounded-full mr-2">STRONG ≥ 60%</span>
                        <span className="inline-block px-2 py-0.5 bg-amber-900/20 text-amber-400 rounded-full mr-2">DECENT ≥ 45%</span>
                        <span className="inline-block px-2 py-0.5 bg-emerald-900/20 text-emerald-400 rounded-full">WEAK &lt; 45%</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    );
  };

  // Main return
  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-2xl border border-slate-700/50">
      {render()}
    </div>
  );
};

// Add this function near the other render functions
